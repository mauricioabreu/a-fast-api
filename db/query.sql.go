// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPeople = `-- name: CountPeople :one
SELECT COUNT(1) FROM people
`

func (q *Queries) CountPeople(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPeople)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findPerson = `-- name: FindPerson :one
SELECT id, nickname, name, birthdate, stack FROM people WHERE id = $1
`

type FindPersonRow struct {
	ID        string
	Nickname  string
	Name      string
	Birthdate pgtype.Date
	Stack     pgtype.Text
}

func (q *Queries) FindPerson(ctx context.Context, id string) (FindPersonRow, error) {
	row := q.db.QueryRow(ctx, findPerson, id)
	var i FindPersonRow
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Name,
		&i.Birthdate,
		&i.Stack,
	)
	return i, err
}

const insertPerson = `-- name: InsertPerson :exec
INSERT INTO people (
    id, nickname, name, birthdate, stack
) VALUES (
    $1, $2, $3, $4, $5
)
`

type InsertPersonParams struct {
	ID        string
	Nickname  string
	Name      string
	Birthdate pgtype.Date
	Stack     pgtype.Text
}

func (q *Queries) InsertPerson(ctx context.Context, arg InsertPersonParams) error {
	_, err := q.db.Exec(ctx, insertPerson,
		arg.ID,
		arg.Nickname,
		arg.Name,
		arg.Birthdate,
		arg.Stack,
	)
	return err
}

const searchPeople = `-- name: SearchPeople :many
SELECT id, nickname, name, birthdate, stack FROM people WHERE term_search LIKE $1 LIMIT 50
`

type SearchPeopleRow struct {
	ID        string
	Nickname  string
	Name      string
	Birthdate pgtype.Date
	Stack     pgtype.Text
}

func (q *Queries) SearchPeople(ctx context.Context, termSearch pgtype.Text) ([]SearchPeopleRow, error) {
	rows, err := q.db.Query(ctx, searchPeople, termSearch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchPeopleRow
	for rows.Next() {
		var i SearchPeopleRow
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.Name,
			&i.Birthdate,
			&i.Stack,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
